/**
 * @license
 * Copyright 2010-2022 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
define(["exports","../_virtual/_rollupPluginBabelHelpers","../core/BufferGeometry","../core/BufferAttribute","../math/Vector3"],(function(e,t,r,o,u){"use strict";var s=function(e){function r(t,r,s,n,a,i){var c;void 0===t&&(t=1),void 0===r&&(r=.4),void 0===s&&(s=64),void 0===n&&(n=8),void 0===a&&(a=2),void 0===i&&(i=3),(c=e.call(this)||this).type="TorusKnotGeometry",c.parameters={radius:t,tube:r,tubularSegments:s,radialSegments:n,p:a,q:i},s=Math.floor(s),n=Math.floor(n);for(var f=[],l=[],h=[],v=[],d=new u.Vector3,m=new u.Vector3,b=new u.Vector3,p=new u.Vector3,y=new u.Vector3,V=new u.Vector3,w=new u.Vector3,M=0;M<=s;++M){var z=M/s*a*Math.PI*2;K(z,a,i,t,b),K(z+.01,a,i,t,p),V.subVectors(p,b),w.addVectors(p,b),y.crossVectors(V,w),w.crossVectors(y,V),y.normalize(),w.normalize();for(var x=0;x<=n;++x){var B=x/n*Math.PI*2,A=-r*Math.cos(B),g=r*Math.sin(B);d.x=b.x+(A*w.x+g*y.x),d.y=b.y+(A*w.y+g*y.y),d.z=b.z+(A*w.z+g*y.z),l.push(d.x,d.y,d.z),m.subVectors(d,b).normalize(),h.push(m.x,m.y,m.z),v.push(M/s),v.push(x/n)}}for(var G=1;G<=s;G++)for(var S=1;S<=n;S++){var P=(n+1)*(G-1)+(S-1),_=(n+1)*G+(S-1),F=(n+1)*G+S,I=(n+1)*(G-1)+S;f.push(P,_,I),f.push(_,F,I)}function K(e,t,r,o,u){var s=Math.cos(e),n=Math.sin(e),a=r/t*e,i=Math.cos(a);u.x=o*(2+i)*.5*s,u.y=o*(2+i)*n*.5,u.z=o*Math.sin(a)*.5}return c.setIndex(f),c.setAttribute("position",new o.Float32BufferAttribute(l,3)),c.setAttribute("normal",new o.Float32BufferAttribute(h,3)),c.setAttribute("uv",new o.Float32BufferAttribute(v,2)),c}return t.inheritsLoose(r,e),r.fromJSON=function(e){return new r(e.radius,e.tube,e.tubularSegments,e.radialSegments,e.p,e.q)},r}(r.BufferGeometry);e.TorusKnotBufferGeometry=s,e.TorusKnotGeometry=s,Object.defineProperty(e,"__esModule",{value:!0})}));

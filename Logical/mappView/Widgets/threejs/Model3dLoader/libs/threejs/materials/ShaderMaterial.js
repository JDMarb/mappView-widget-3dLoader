/**
 * @license
 * Copyright 2010-2022 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
define(["exports","../_virtual/_rollupPluginBabelHelpers","./Material","../renderers/shaders/UniformsUtils","../renderers/shaders/ShaderChunk/default_vertex.glsl","../renderers/shaders/ShaderChunk/default_fragment.glsl"],(function(e,r,t,i,s,a){"use strict";var n=function(e){function t(r){var t;return(t=e.call(this)||this).isShaderMaterial=!0,t.type="ShaderMaterial",t.defines={},t.uniforms={},t.vertexShader=s.default,t.fragmentShader=a.default,t.linewidth=1,t.wireframe=!1,t.wireframeLinewidth=1,t.fog=!1,t.lights=!1,t.clipping=!1,t.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},t.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},t.index0AttributeName=void 0,t.uniformsNeedUpdate=!1,t.glslVersion=null,void 0!==r&&(void 0!==r.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),t.setValues(r)),t}r.inheritsLoose(t,e);var n=t.prototype;return n.copy=function(r){return e.prototype.copy.call(this,r),this.fragmentShader=r.fragmentShader,this.vertexShader=r.vertexShader,this.uniforms=i.cloneUniforms(r.uniforms),this.defines=Object.assign({},r.defines),this.wireframe=r.wireframe,this.wireframeLinewidth=r.wireframeLinewidth,this.fog=r.fog,this.lights=r.lights,this.clipping=r.clipping,this.extensions=Object.assign({},r.extensions),this.glslVersion=r.glslVersion,this},n.toJSON=function(r){var t=e.prototype.toJSON.call(this,r);for(var i in t.glslVersion=this.glslVersion,t.uniforms={},this.uniforms){var s=this.uniforms[i].value;s&&s.isTexture?t.uniforms[i]={type:"t",value:s.toJSON(r).uuid}:s&&s.isColor?t.uniforms[i]={type:"c",value:s.getHex()}:s&&s.isVector2?t.uniforms[i]={type:"v2",value:s.toArray()}:s&&s.isVector3?t.uniforms[i]={type:"v3",value:s.toArray()}:s&&s.isVector4?t.uniforms[i]={type:"v4",value:s.toArray()}:s&&s.isMatrix3?t.uniforms[i]={type:"m3",value:s.toArray()}:s&&s.isMatrix4?t.uniforms[i]={type:"m4",value:s.toArray()}:t.uniforms[i]={value:s}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader;var a={};for(var n in this.extensions)!0===this.extensions[n]&&(a[n]=!0);return Object.keys(a).length>0&&(t.extensions=a),t},t}(t.Material);e.ShaderMaterial=n,Object.defineProperty(e,"__esModule",{value:!0})}));

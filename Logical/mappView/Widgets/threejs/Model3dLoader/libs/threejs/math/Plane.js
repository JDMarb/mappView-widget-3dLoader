/**
 * @license
 * Copyright 2010-2022 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
define(["exports","./Matrix3","./Vector3"],(function(t,n,o){"use strict";var r=new o.Vector3,i=new o.Vector3,s=new n.Matrix3,a=function(){function t(t,n){void 0===t&&(t=new o.Vector3(1,0,0)),void 0===n&&(n=0),this.isPlane=!0,this.normal=t,this.constant=n}var n=t.prototype;return n.set=function(t,n){return this.normal.copy(t),this.constant=n,this},n.setComponents=function(t,n,o,r){return this.normal.set(t,n,o),this.constant=r,this},n.setFromNormalAndCoplanarPoint=function(t,n){return this.normal.copy(t),this.constant=-n.dot(this.normal),this},n.setFromCoplanarPoints=function(t,n,o){var s=r.subVectors(o,n).cross(i.subVectors(t,n)).normalize();return this.setFromNormalAndCoplanarPoint(s,t),this},n.copy=function(t){return this.normal.copy(t.normal),this.constant=t.constant,this},n.normalize=function(){var t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this},n.negate=function(){return this.constant*=-1,this.normal.negate(),this},n.distanceToPoint=function(t){return this.normal.dot(t)+this.constant},n.distanceToSphere=function(t){return this.distanceToPoint(t.center)-t.radius},n.projectPoint=function(t,n){return n.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)},n.intersectLine=function(t,n){var o=t.delta(r),i=this.normal.dot(o);if(0===i)return 0===this.distanceToPoint(t.start)?n.copy(t.start):null;var s=-(t.start.dot(this.normal)+this.constant)/i;return s<0||s>1?null:n.copy(o).multiplyScalar(s).add(t.start)},n.intersectsLine=function(t){var n=this.distanceToPoint(t.start),o=this.distanceToPoint(t.end);return n<0&&o>0||o<0&&n>0},n.intersectsBox=function(t){return t.intersectsPlane(this)},n.intersectsSphere=function(t){return t.intersectsPlane(this)},n.coplanarPoint=function(t){return t.copy(this.normal).multiplyScalar(-this.constant)},n.applyMatrix4=function(t,n){var o=n||s.getNormalMatrix(t),i=this.coplanarPoint(r).applyMatrix4(t),a=this.normal.applyMatrix3(o).normalize();return this.constant=-i.dot(a),this},n.translate=function(t){return this.constant-=t.dot(this.normal),this},n.equals=function(t){return t.normal.equals(this.normal)&&t.constant===this.constant},n.clone=function(){return(new this.constructor).copy(this)},t}();t.Plane=a,Object.defineProperty(t,"__esModule",{value:!0})}));

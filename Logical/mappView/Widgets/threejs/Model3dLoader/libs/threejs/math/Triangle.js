/**
 * @license
 * Copyright 2010-2022 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
define(["exports","./Vector3"],(function(t,r){"use strict";var e=new r.Vector3,o=new r.Vector3,c=new r.Vector3,n=new r.Vector3,s=new r.Vector3,i=new r.Vector3,u=new r.Vector3,a=new r.Vector3,h=new r.Vector3,d=new r.Vector3,f=function(){function t(t,e,o){void 0===t&&(t=new r.Vector3),void 0===e&&(e=new r.Vector3),void 0===o&&(o=new r.Vector3),this.a=t,this.b=e,this.c=o}t.getNormal=function(t,r,o,c){c.subVectors(o,r),e.subVectors(t,r),c.cross(e);var n=c.lengthSq();return n>0?c.multiplyScalar(1/Math.sqrt(n)):c.set(0,0,0)},t.getBarycoord=function(t,r,n,s,i){e.subVectors(s,r),o.subVectors(n,r),c.subVectors(t,r);var u=e.dot(e),a=e.dot(o),h=e.dot(c),d=o.dot(o),f=o.dot(c),V=u*d-a*a;if(0===V)return i.set(-2,-1,-1);var b=1/V,l=(d*h-a*f)*b,y=(u*f-a*h)*b;return i.set(1-l-y,y,l)},t.containsPoint=function(t,r,e,o){return this.getBarycoord(t,r,e,o,n),n.x>=0&&n.y>=0&&n.x+n.y<=1},t.getUV=function(t,r,e,o,c,s,i,u){return this.getBarycoord(t,r,e,o,n),u.set(0,0),u.addScaledVector(c,n.x),u.addScaledVector(s,n.y),u.addScaledVector(i,n.z),u},t.isFrontFacing=function(t,r,c,n){return e.subVectors(c,r),o.subVectors(t,r),e.cross(o).dot(n)<0};var f=t.prototype;return f.set=function(t,r,e){return this.a.copy(t),this.b.copy(r),this.c.copy(e),this},f.setFromPointsAndIndices=function(t,r,e,o){return this.a.copy(t[r]),this.b.copy(t[e]),this.c.copy(t[o]),this},f.setFromAttributeAndIndices=function(t,r,e,o){return this.a.fromBufferAttribute(t,r),this.b.fromBufferAttribute(t,e),this.c.fromBufferAttribute(t,o),this},f.clone=function(){return(new this.constructor).copy(this)},f.copy=function(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this},f.getArea=function(){return e.subVectors(this.c,this.b),o.subVectors(this.a,this.b),.5*e.cross(o).length()},f.getMidpoint=function(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},f.getNormal=function(r){return t.getNormal(this.a,this.b,this.c,r)},f.getPlane=function(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)},f.getBarycoord=function(r,e){return t.getBarycoord(r,this.a,this.b,this.c,e)},f.getUV=function(r,e,o,c,n){return t.getUV(r,this.a,this.b,this.c,e,o,c,n)},f.containsPoint=function(r){return t.containsPoint(r,this.a,this.b,this.c)},f.isFrontFacing=function(r){return t.isFrontFacing(this.a,this.b,this.c,r)},f.intersectsBox=function(t){return t.intersectsTriangle(this)},f.closestPointToPoint=function(t,r){var e,o,c=this.a,n=this.b,f=this.c;s.subVectors(n,c),i.subVectors(f,c),a.subVectors(t,c);var V=s.dot(a),b=i.dot(a);if(V<=0&&b<=0)return r.copy(c);h.subVectors(t,n);var l=s.dot(h),y=i.dot(h);if(l>=0&&y<=l)return r.copy(n);var p=V*y-l*b;if(p<=0&&V>=0&&l<=0)return e=V/(V-l),r.copy(c).addScaledVector(s,e);d.subVectors(t,f);var g=s.dot(d),v=i.dot(d);if(v>=0&&g<=v)return r.copy(f);var w=g*b-V*v;if(w<=0&&b>=0&&v<=0)return o=b/(b-v),r.copy(c).addScaledVector(i,o);var m=l*v-g*y;if(m<=0&&y-l>=0&&g-v>=0)return u.subVectors(f,n),o=(y-l)/(y-l+(g-v)),r.copy(n).addScaledVector(u,o);var S=1/(m+w+p);return e=w*S,o=p*S,r.copy(c).addScaledVector(s,e).addScaledVector(i,o)},f.equals=function(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)},t}();t.Triangle=f,Object.defineProperty(t,"__esModule",{value:!0})}));

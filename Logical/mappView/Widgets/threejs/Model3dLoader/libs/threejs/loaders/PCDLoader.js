/**
 * @license
 * Copyright 2010-2022 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
define(["exports","../_virtual/_rollupPluginBabelHelpers","../core/BufferGeometry","./FileLoader","../core/BufferAttribute","./Loader","./LoaderUtils","../objects/Points","../materials/PointsMaterial"],(function(e,t,i,r,n,s,o,a,l){"use strict";var p=function(e){function s(t){var i;return(i=e.call(this,t)||this).littleEndian=!0,i}t.inheritsLoose(s,e);var p=s.prototype;return p.load=function(e,t,i,n){var s=this,o=new r.FileLoader(s.manager);o.setPath(s.path),o.setResponseType("arraybuffer"),o.setRequestHeader(s.requestHeader),o.setWithCredentials(s.withCredentials),o.load(e,(function(i){try{t(s.parse(i))}catch(t){n?n(t):console.error(t),s.manager.itemError(e)}}),i,n)},p.parse=function(e){var t=o.LoaderUtils.decodeText(new Uint8Array(e)),r=function(e){var t={},i=e.search(/[\r\n]DATA\s(\S*)\s/i),r=/[\r\n]DATA\s(\S*)\s/i.exec(e.slice(i-1));if(t.data=r[1],t.headerLen=r[0].length+i,t.str=e.slice(0,t.headerLen),t.str=t.str.replace(/\#.*/gi,""),t.version=/VERSION (.*)/i.exec(t.str),t.fields=/FIELDS (.*)/i.exec(t.str),t.size=/SIZE (.*)/i.exec(t.str),t.type=/TYPE (.*)/i.exec(t.str),t.count=/COUNT (.*)/i.exec(t.str),t.width=/WIDTH (.*)/i.exec(t.str),t.height=/HEIGHT (.*)/i.exec(t.str),t.viewpoint=/VIEWPOINT (.*)/i.exec(t.str),t.points=/POINTS (.*)/i.exec(t.str),null!==t.version&&(t.version=parseFloat(t.version[1])),t.fields=null!==t.fields?t.fields[1].split(" "):[],null!==t.type&&(t.type=t.type[1].split(" ")),null!==t.width&&(t.width=parseInt(t.width[1])),null!==t.height&&(t.height=parseInt(t.height[1])),null!==t.viewpoint&&(t.viewpoint=t.viewpoint[1]),null!==t.points&&(t.points=parseInt(t.points[1],10)),null===t.points&&(t.points=t.width*t.height),null!==t.size&&(t.size=t.size[1].split(" ").map((function(e){return parseInt(e,10)}))),null!==t.count)t.count=t.count[1].split(" ").map((function(e){return parseInt(e,10)}));else{t.count=[];for(var n=0,s=t.fields.length;n<s;n++)t.count.push(1)}t.offset={};for(var o=0,a=0,l=t.fields.length;a<l;a++)"ascii"===t.data?t.offset[t.fields[a]]=a:(t.offset[t.fields[a]]=o,o+=t.size[a]*t.count[a]);return t.rowSize=o,t}(t),s=[],p=[],u=[];if("ascii"===r.data)for(var h=r.offset,d=t.slice(r.headerLen).split("\n"),f=0,c=d.length;f<c;f++)if(""!==d[f]){var g=d[f].split(" ");if(void 0!==h.x&&(s.push(parseFloat(g[h.x])),s.push(parseFloat(g[h.y])),s.push(parseFloat(g[h.z]))),void 0!==h.rgb){var w=r.fields.findIndex((function(e){return"rgb"===e})),v=r.type[w],m=parseFloat(g[h.rgb]),b=m;if("F"===v){var F=new Float32Array(1);F[0]=m,b=new Int32Array(F.buffer)[0]}var x=b>>16&255,E=b>>8&255,y=b>>0&255;u.push(x/255,E/255,y/255)}void 0!==h.normal_x&&(p.push(parseFloat(g[h.normal_x])),p.push(parseFloat(g[h.normal_y])),p.push(parseFloat(g[h.normal_z])))}if("binary_compressed"===r.data)for(var z=new Uint32Array(e.slice(r.headerLen,r.headerLen+8)),I=z[0],A=z[1],_=function(e,t){var i,r,n,s=e.length,o=new Uint8Array(t),a=0,l=0;do{if((i=e[a++])<32){if(l+ ++i>t)throw new Error("Output buffer is not large enough");if(a+i>s)throw new Error("Invalid compressed data");do{o[l++]=e[a++]}while(--i)}else{if(r=i>>5,n=l-((31&i)<<8)-1,a>=s)throw new Error("Invalid compressed data");if(7===r&&(r+=e[a++],a>=s))throw new Error("Invalid compressed data");if(n-=e[a++],l+r+2>t)throw new Error("Output buffer is not large enough");if(n<0)throw new Error("Invalid compressed data");if(n>=l)throw new Error("Invalid compressed data");do{o[l++]=o[n++]}while(2+--r)}}while(a<s);return o}(new Uint8Array(e,r.headerLen+8,I),A),L=new DataView(_.buffer),U=r.offset,P=0;P<r.points;P++)void 0!==U.x&&(s.push(L.getFloat32(r.points*U.x+r.size[0]*P,this.littleEndian)),s.push(L.getFloat32(r.points*U.y+r.size[1]*P,this.littleEndian)),s.push(L.getFloat32(r.points*U.z+r.size[2]*P,this.littleEndian))),void 0!==U.rgb&&(u.push(L.getUint8(r.points*U.rgb+r.size[3]*P+2)/255),u.push(L.getUint8(r.points*U.rgb+r.size[3]*P+1)/255),u.push(L.getUint8(r.points*U.rgb+r.size[3]*P+0)/255)),void 0!==U.normal_x&&(p.push(L.getFloat32(r.points*U.normal_x+r.size[4]*P,this.littleEndian)),p.push(L.getFloat32(r.points*U.normal_y+r.size[5]*P,this.littleEndian)),p.push(L.getFloat32(r.points*U.normal_z+r.size[6]*P,this.littleEndian)));if("binary"===r.data)for(var T=new DataView(e,r.headerLen),S=r.offset,B=0,D=0;B<r.points;B++,D+=r.rowSize)void 0!==S.x&&(s.push(T.getFloat32(D+S.x,this.littleEndian)),s.push(T.getFloat32(D+S.y,this.littleEndian)),s.push(T.getFloat32(D+S.z,this.littleEndian))),void 0!==S.rgb&&(u.push(T.getUint8(D+S.rgb+2)/255),u.push(T.getUint8(D+S.rgb+1)/255),u.push(T.getUint8(D+S.rgb+0)/255)),void 0!==S.normal_x&&(p.push(T.getFloat32(D+S.normal_x,this.littleEndian)),p.push(T.getFloat32(D+S.normal_y,this.littleEndian)),p.push(T.getFloat32(D+S.normal_z,this.littleEndian)));var H=new i.BufferGeometry;s.length>0&&H.setAttribute("position",new n.Float32BufferAttribute(s,3)),p.length>0&&H.setAttribute("normal",new n.Float32BufferAttribute(p,3)),u.length>0&&H.setAttribute("color",new n.Float32BufferAttribute(u,3)),H.computeBoundingSphere();var O=new l.PointsMaterial({size:.005});return u.length>0?O.vertexColors=!0:O.color.setHex(16777215*Math.random()),new a.Points(H,O)},s}(s.Loader);e.PCDLoader=p,Object.defineProperty(e,"__esModule",{value:!0})}));

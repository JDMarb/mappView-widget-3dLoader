/**
 * @license
 * Copyright 2010-2022 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
define(["exports","./ShaderChunk","./UniformsUtils","../../math/Vector2","../../math/Vector3","./UniformsLib","../../math/Color","../../math/Matrix3"],(function(e,r,a,n,i,m,s,o){"use strict";var h={basic:{uniforms:a.mergeUniforms([m.UniformsLib.common,m.UniformsLib.specularmap,m.UniformsLib.envmap,m.UniformsLib.aomap,m.UniformsLib.lightmap,m.UniformsLib.fog]),vertexShader:r.ShaderChunk.meshbasic_vert,fragmentShader:r.ShaderChunk.meshbasic_frag},lambert:{uniforms:a.mergeUniforms([m.UniformsLib.common,m.UniformsLib.specularmap,m.UniformsLib.envmap,m.UniformsLib.aomap,m.UniformsLib.lightmap,m.UniformsLib.emissivemap,m.UniformsLib.fog,m.UniformsLib.lights,{emissive:{value:new s.Color(0)}}]),vertexShader:r.ShaderChunk.meshlambert_vert,fragmentShader:r.ShaderChunk.meshlambert_frag},phong:{uniforms:a.mergeUniforms([m.UniformsLib.common,m.UniformsLib.specularmap,m.UniformsLib.envmap,m.UniformsLib.aomap,m.UniformsLib.lightmap,m.UniformsLib.emissivemap,m.UniformsLib.bumpmap,m.UniformsLib.normalmap,m.UniformsLib.displacementmap,m.UniformsLib.fog,m.UniformsLib.lights,{emissive:{value:new s.Color(0)},specular:{value:new s.Color(1118481)},shininess:{value:30}}]),vertexShader:r.ShaderChunk.meshphong_vert,fragmentShader:r.ShaderChunk.meshphong_frag},standard:{uniforms:a.mergeUniforms([m.UniformsLib.common,m.UniformsLib.envmap,m.UniformsLib.aomap,m.UniformsLib.lightmap,m.UniformsLib.emissivemap,m.UniformsLib.bumpmap,m.UniformsLib.normalmap,m.UniformsLib.displacementmap,m.UniformsLib.roughnessmap,m.UniformsLib.metalnessmap,m.UniformsLib.fog,m.UniformsLib.lights,{emissive:{value:new s.Color(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:r.ShaderChunk.meshphysical_vert,fragmentShader:r.ShaderChunk.meshphysical_frag},toon:{uniforms:a.mergeUniforms([m.UniformsLib.common,m.UniformsLib.aomap,m.UniformsLib.lightmap,m.UniformsLib.emissivemap,m.UniformsLib.bumpmap,m.UniformsLib.normalmap,m.UniformsLib.displacementmap,m.UniformsLib.gradientmap,m.UniformsLib.fog,m.UniformsLib.lights,{emissive:{value:new s.Color(0)}}]),vertexShader:r.ShaderChunk.meshtoon_vert,fragmentShader:r.ShaderChunk.meshtoon_frag},matcap:{uniforms:a.mergeUniforms([m.UniformsLib.common,m.UniformsLib.bumpmap,m.UniformsLib.normalmap,m.UniformsLib.displacementmap,m.UniformsLib.fog,{matcap:{value:null}}]),vertexShader:r.ShaderChunk.meshmatcap_vert,fragmentShader:r.ShaderChunk.meshmatcap_frag},points:{uniforms:a.mergeUniforms([m.UniformsLib.points,m.UniformsLib.fog]),vertexShader:r.ShaderChunk.points_vert,fragmentShader:r.ShaderChunk.points_frag},dashed:{uniforms:a.mergeUniforms([m.UniformsLib.common,m.UniformsLib.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:r.ShaderChunk.linedashed_vert,fragmentShader:r.ShaderChunk.linedashed_frag},depth:{uniforms:a.mergeUniforms([m.UniformsLib.common,m.UniformsLib.displacementmap]),vertexShader:r.ShaderChunk.depth_vert,fragmentShader:r.ShaderChunk.depth_frag},normal:{uniforms:a.mergeUniforms([m.UniformsLib.common,m.UniformsLib.bumpmap,m.UniformsLib.normalmap,m.UniformsLib.displacementmap,{opacity:{value:1}}]),vertexShader:r.ShaderChunk.meshnormal_vert,fragmentShader:r.ShaderChunk.meshnormal_frag},sprite:{uniforms:a.mergeUniforms([m.UniformsLib.sprite,m.UniformsLib.fog]),vertexShader:r.ShaderChunk.sprite_vert,fragmentShader:r.ShaderChunk.sprite_frag},background:{uniforms:{uvTransform:{value:new o.Matrix3},t2D:{value:null}},vertexShader:r.ShaderChunk.background_vert,fragmentShader:r.ShaderChunk.background_frag},cube:{uniforms:a.mergeUniforms([m.UniformsLib.envmap,{opacity:{value:1}}]),vertexShader:r.ShaderChunk.cube_vert,fragmentShader:r.ShaderChunk.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:r.ShaderChunk.equirect_vert,fragmentShader:r.ShaderChunk.equirect_frag},distanceRGBA:{uniforms:a.mergeUniforms([m.UniformsLib.common,m.UniformsLib.displacementmap,{referencePosition:{value:new i.Vector3},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:r.ShaderChunk.distanceRGBA_vert,fragmentShader:r.ShaderChunk.distanceRGBA_frag},shadow:{uniforms:a.mergeUniforms([m.UniformsLib.lights,m.UniformsLib.fog,{color:{value:new s.Color(0)},opacity:{value:1}}]),vertexShader:r.ShaderChunk.shadow_vert,fragmentShader:r.ShaderChunk.shadow_frag}};h.physical={uniforms:a.mergeUniforms([h.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new n.Vector2(1,1)},clearcoatNormalMap:{value:null},iridescence:{value:0},iridescenceMap:{value:null},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},sheen:{value:0},sheenColor:{value:new s.Color(0)},sheenColorMap:{value:null},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new n.Vector2},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new s.Color(0)},specularIntensity:{value:1},specularIntensityMap:{value:null},specularColor:{value:new s.Color(1,1,1)},specularColorMap:{value:null}}]),vertexShader:r.ShaderChunk.meshphysical_vert,fragmentShader:r.ShaderChunk.meshphysical_frag},e.ShaderLib=h,Object.defineProperty(e,"__esModule",{value:!0})}));
